/*******************************************************************************
 * Copyright (c) 2010 Robert "Unlogic" Olofsson (unlogic@unlogic.se).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-3.0-standalone.html
 ******************************************************************************/
package se.unlogic.hierarchy.foregroundmodules.hddtemp;

import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.xml.Elementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLGenerator;

@Table(name = "hddtemp_servers")
@XMLElement
public class Server implements Elementable {

	@XMLElement
	@DAOManaged(autoGenerated = true)
	@Key
	private Integer serverID;

	@XMLElement(cdata = true)
	@DAOManaged
	@WebPopulate(required = true, maxLength=255)
	@OrderBy
	private String name;

	@XMLElement(cdata = true)
	@DAOManaged
	@WebPopulate(required = true, maxLength=255)
	private String host;

	@XMLElement
	@DAOManaged
	@WebPopulate(required = true, maxLength = 5)
	private Integer port;

	@XMLElement
	@DAOManaged
	@WebPopulate(required = false)
	private boolean monitor;

	@XMLElement
	@DAOManaged
	@WebPopulate(required = false)
	private boolean missingDriveWarning;

	@XMLElement(name="Drives")
	@DAOManaged
	@OneToMany
	private List<ServerDrive> drives;

	@XMLElement
	private boolean timeout;

	@XMLElement
	private boolean unableToConnect;

	@Override
	public Element toXML(Document doc) {

		return XMLGenerator.toXML(this, doc);
	}

	public Integer getServerID() {

		return serverID;
	}

	public void setServerID(Integer serverID) {

		this.serverID = serverID;
	}

	public String getName() {

		return name;
	}

	public void setName(String name) {

		this.name = name;
	}

	public String getHost() {

		return host;
	}

	public void setHost(String host) {

		this.host = host;
	}

	public Integer getPort() {

		return port;
	}

	public void setPort(Integer port) {

		this.port = port;
	}

	public boolean getMonitor() {

		return monitor;
	}

	public void setMonitor(boolean monitor) {

		this.monitor = monitor;
	}

	public List<ServerDrive> getDrives() {

		return drives;
	}

	public void setDrives(List<ServerDrive> drives) {

		this.drives = drives;
	}

	public boolean getMissingDriveWarning() {

		return missingDriveWarning;
	}

	public void setMissingDriveWarning(boolean missingDriveWarning) {

		this.missingDriveWarning = missingDriveWarning;
	}


	public boolean isTimeout() {

		return timeout;
	}


	public void setTimeout(boolean timeout) {

		this.timeout = timeout;
	}

	@Override
	public String toString() {

		return this.name + " (ID: " + this.serverID + ")";
	}


	public boolean isUnableToConnect() {

		return unableToConnect;
	}


	public void setUnableToConnect(boolean unableToConnect) {

		this.unableToConnect = unableToConnect;
	}
}
